{"version":3,"sources":["index.js","saasmodule.js","cloudbase.js","utils.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.init = exports.pageModule = exports.PageModule = void 0;\nconst saasmodule_1 = require(\"./saasmodule\");\nvar saasmodule_2 = require(\"./saasmodule\");\nObject.defineProperty(exports, \"PageModule\", { enumerable: true, get: function () { return saasmodule_2.PageModule; } });\nexports.pageModule = new saasmodule_1.PageModule();\n/**\n * 初始化全局的单例 PageModule\n * @param moduleName - 模块名称\n * @param options    - 模块参数\n * @returns\n */\nfunction init(moduleName, options = {}) {\n    return exports.pageModule.init(moduleName, options);\n}\nexports.init = init;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PageModule = void 0;\nconst cloudbase_1 = require(\"./cloudbase\");\nclass PageModule {\n    constructor(moduleName, options) {\n        this.inited = false;\n        if (moduleName) {\n            this.init(moduleName, options);\n        }\n    }\n    init(moduleName, options = {}) {\n        if (this.inited) {\n            throw new Error('[ERROR]PageModule has already been inited, do not repeat initialization.');\n        }\n        this.env = `$:${moduleName}`;\n        this.initCloudbaseInstance(this.env, options.cloudbaseInstanceInitOptions);\n        this.inited = true;\n        return this;\n    }\n    callMethod(methodName, data, options = {}) {\n        this.checkInited();\n        return this.cloudbaseInstance.callFunction({\n            name: methodName,\n            data: {\n                ...options,\n                envType: options.envType || 'prod',\n                // 数据源参数放到 params 中\n                params: data,\n            },\n        });\n    }\n    uploadFile(options) {\n    }\n    deleteFile(options) {\n    }\n    downloadFile(options) {\n    }\n    getTempFileURL(options) {\n    }\n    initCloudbaseInstance(env, options = {}) {\n        this.cloudbaseInstance = (0, cloudbase_1.initCloudbaseInstance)(env, options);\n    }\n    checkInited() {\n        if (!this.inited) {\n            throw new Error('[ERROR]PageModule is not inited, please call `init()` method first.');\n        }\n    }\n}\nexports.PageModule = PageModule;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initCloudbaseInstance = exports.initCloudbaseInstanceForWxClient = exports.initCloudbaseInstanceForNodejs = void 0;\nconst utils_1 = require(\"./utils\");\nconst kBaseSdk = 'wx-server-sdk';\nconst kRuntimeEnv = (0, utils_1.identifyRuntimeEnv)();\n/* eslint-disable max-len */\nfunction initCloudbaseInstanceForNodejs(env, options = {}) {\n    try {\n        /* eslint-disable @typescript-eslint/no-require-imports */\n        const cloud = require(kBaseSdk);\n        const cloudInstance = cloud.createNewInstance({\n            ...options,\n            env,\n        });\n        return cloudInstance;\n    }\n    catch (e) {\n        if (e.code === 'MODULE_NOT_FOUND') {\n            /* eslint-disable max-len */\n            throw new Error(`[ERROR][${kBaseSdk}] is required for Node.js environment, please install '${kBaseSdk}' first.`);\n        }\n        else {\n            throw e;\n        }\n    }\n}\nexports.initCloudbaseInstanceForNodejs = initCloudbaseInstanceForNodejs;\nfunction initCloudbaseInstanceForWxClient(env, options = {}) {\n    // 微信小程序环境\n    const cloudInstance = new wx.cloud.Cloud({\n        resourceEnv: env,\n    });\n    cloudInstance.init(options);\n    return cloudInstance;\n}\nexports.initCloudbaseInstanceForWxClient = initCloudbaseInstanceForWxClient;\nfunction initCloudbaseInstance(env, options = {}) {\n    if (kRuntimeEnv === utils_1.RuntimeEnv.NODEJS) {\n        return initCloudbaseInstanceForNodejs(env, options);\n    }\n    if (kRuntimeEnv === utils_1.RuntimeEnv.WX_CLIENT) {\n        return initCloudbaseInstanceForWxClient(env, options);\n    }\n    /* eslint-disable max-len */\n    throw new Error('[ERROR] Unknown runtime environment, please use in Node.js or WX_CLIENT environment');\n}\nexports.initCloudbaseInstance = initCloudbaseInstance;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.identifyRuntimeEnv = exports.RuntimeEnv = exports.isNodeEnv = exports.isSupportCloudbase = exports.isInWxEnv = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nfunction isInWxEnv() {\n    // window && window.__wxjs_environment\n    return !!__wxConfig;\n}\nexports.isInWxEnv = isInWxEnv;\n/* eslint-enable @typescript-eslint/naming-convention */\nfunction isSupportCloudbase() {\n    return !!wx.cloud;\n}\nexports.isSupportCloudbase = isSupportCloudbase;\nfunction isNodeEnv() {\n    var _a, _b;\n    return ((_b = (_a = global === null || global === void 0 ? void 0 : global.process) === null || _a === void 0 ? void 0 : _a.release) === null || _b === void 0 ? void 0 : _b.name) === 'node';\n}\nexports.isNodeEnv = isNodeEnv;\nvar RuntimeEnv;\n(function (RuntimeEnv) {\n    RuntimeEnv[\"NODEJS\"] = \"nodejs\";\n    RuntimeEnv[\"WX_CLIENT\"] = \"WX_CLIENT\";\n    RuntimeEnv[\"UNKNOWN\"] = \"unknown\";\n})(RuntimeEnv = exports.RuntimeEnv || (exports.RuntimeEnv = {}));\nfunction identifyRuntimeEnv() {\n    // 注意检查顺序：先检查是否在 Node.js 环境，再检查是否在小程序环境\n    if (isNodeEnv()) {\n        return RuntimeEnv.NODEJS;\n    }\n    if (isInWxEnv() && isSupportCloudbase()) {\n        return RuntimeEnv.WX_CLIENT;\n    }\n    return RuntimeEnv.UNKNOWN;\n}\nexports.identifyRuntimeEnv = identifyRuntimeEnv;\n"]}